---
format_version: '11'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: flutter
app:
  envs:
  - BITRISE_FLUTTER_PROJECT_LOCATION: {{ cookiecutter.project_name|lower|replace(' ', '_') }}
  - FLUTTER_VERSION: 2.8.1
trigger_map:
- pull_request_source_branch: release/*
  pull_request_target_branch: master
  workflow: Deploy
- pull_request_source_branch: "*"
  workflow: CI
workflows:
  CI:
    steps:
    - activate-ssh-key@4:
        run_if: '{{ "{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}" }}'
    - git-clone@6: {}
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            echo "Setting up private repo creds"

            mkdir -p ~/.gradle
            touch ~/.gradle/gradle.properties

            echo "mavenUsername="$MAVEN_USER > ~/.gradle/gradle.properties
            echo "mavenPassword="$MAVEN_PASSWORD >> ~/.gradle/gradle.properties
            cat ~/.gradle/gradle.properties
        title: Gradle credentials
    - script@1:
        inputs:
        - content: |
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            echo -e "\n\nmachine api.github.com\nlogin ${MAVEN_USER}\npassword ${MAVEN_PASSWORD}" >> ~/.netrc
            echo -e "\n\nmachine github.com\nlogin ${MAVEN_USER}\npassword ${MAVEN_PASSWORD}" >> ~/.netrc

            chmod 0600 ~/.netrc
        title: ".netrc config"
    - flutter-installer@0:
        inputs:
        - version: "$FLUTTER_VERSION"
        - is_update: 'false'
    - cache-pull@2: {}
    - script@1:
        inputs:
          - content: |
              pub global activate junitreport
    - flutter-analyze@0:
        inputs:
        - fail_severity: warning
        - project_location: "$BITRISE_FLUTTER_PROJECT_LOCATION"
    - flutter-test@1:
        inputs:
        - generate_code_coverage_files: 'yes'
        - project_location: "$BITRISE_FLUTTER_PROJECT_LOCATION"
    - deploy-to-bitrise-io@2.0: {}
    - script@1:
        title: Sanity build the test app
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -ex

            cd test_app
            flutter pub get

            flutter build apk

            flutter precache --ios
            cd ios/
            bundle install
            bundle exec pod update

            cd ..
            flutter build ios --simulator
            flutter build ios-framework --no-profile --no-debug
    - script@1:
        title: Push the code coverage report back
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -ex\n\ngit
            checkout $BITRISE_GIT_BRANCH --\n\ngit add .\ngit status -v\n\nif ! git
            diff-index --quiet HEAD --; then\n   git commit -m \"Code coverage reports.\"\n
            \  git push origin $BITRISE_GIT_BRANCH \nfi\n\n"
    - cache-push@2: {}
  Deploy:
    steps:
    - activate-ssh-key@4:
        run_if: '{{ "{{getenv \"SSH_RSA_PRIVATE_KEY\" | ne \"\"}}" }}'
    - git-clone@6: {}
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex

            echo "Setting up private repo creds"

            mkdir -p ~/.gradle
            touch ~/.gradle/gradle.properties

            echo "mavenUsername="$MAVEN_USER > ~/.gradle/gradle.properties
            echo "mavenPassword="$MAVEN_PASSWORD >> ~/.gradle/gradle.properties
            cat ~/.gradle/gradle.properties
        title: Gradle credentials
    - script@1:
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -e
            # debug log
            set -x

            echo -e "\n\nmachine api.github.com\nlogin ${MAVEN_USER}\npassword ${MAVEN_PASSWORD}" >> ~/.netrc
            echo -e "\n\nmachine github.com\nlogin ${MAVEN_USER}\npassword ${MAVEN_PASSWORD}" >> ~/.netrc

            chmod 0600 ~/.netrc
        title: ".netrc config"
    - flutter-installer@0:
        inputs:
        - version: "$FLUTTER_VERSION"
        - is_update: 'false'
    - script@1:
        inputs:
          - content: |
              pub global activate junitreport
    - cache-pull@2: {}
    - flutter-analyze@0:
        inputs:
        - fail_severity: warning
        - project_location: "$BITRISE_FLUTTER_PROJECT_LOCATION"
    - flutter-test@1:
        inputs:
        - generate_code_coverage_files: 'yes'
        - project_location: "$BITRISE_FLUTTER_PROJECT_LOCATION"
    - deploy-to-bitrise-io@2.0: {}
    - script@1:
        title: Sanity build the test app
        inputs:
        - content: |-
            #!/usr/bin/env bash
            # fail if any commands fails
            set -ex

            cd test_app
            flutter pub get
            flutter build apk

            flutter precache --ios
            cd ios/
            bundle install
            bundle exec pod update

            cd ..
            flutter build ios --simulator
    - script@1:
        inputs:
        - content: "#!/usr/bin/env bash\n# fail if any commands fails\nset -ex\n\n#
            Grab the version number from pubspec\nversion=`cat {{ cookiecutter.project_name|lower|replace(' ', '_') }}/pubspec.yaml
            | grep version | cut -d\":\" -f2`\nversion=`echo $version`\n\nif git rev-parse
            \"$version\" >/dev/null 2>&1; then\n  echo \"Version [${version}] already
            exists on GitHub!\";\n  exit -1\nfi\n\nsed -i'.orig' -e \"s/^Latest version:
            .*/Latest version: $version/g\" README.md\n\ngit add .\ngit status -v\n\ngit
            commit -m \"\U0001F680 Released version $version\"\n\ngit tag $version\n\ngit
            push origin HEAD:master\ngit push origin --tags"
        title: Release the new version
    - cache-push@2: {}
meta:
  bitrise.io:
    stack: osx-xcode-13.4.x
